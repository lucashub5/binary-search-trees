(()=>{"use strict";class e{constructor(e){this.value=e,this.left=null,this.right=null}}class t{constructor(e){this.root=this.buildTree(e)}buildTree(e){const t=[...new Set(e)].sort(((e,t)=>e-t));return this.recursiveBuild(t,0,t.length-1)}recursiveBuild(t,r,n){if(r>n)return null;const i=Math.floor((r+n)/2),u=new e(t[i]);return u.left=this.recursiveBuild(t,r,i-1),u.right=this.recursiveBuild(t,i+1,n),u}prettyPrint(e,t="",r=!0){return null===e?"":this.prettyPrint(e.right,`${t}${r?"│   ":"    "}`,!1)+`${t}${r?"└── ":"┌── "}${e.value}\n`+this.prettyPrint(e.left,`${t}${r?"    ":"│   "}`,!0)}insert(t){null===this.root?this.root=new e(t):this.recursiveInsert(t,this.root)}recursiveInsert(t,r){t!==r.value&&(t<r.value?null===r.left?r.left=new e(t):this.recursiveInsert(t,r.left):null===r.right?r.right=new e(t):this.recursiveInsert(t,r.right))}delete(e){const t=this.recursiveDelete(e,this.root,null);if(null!==t)if(null===t.curr.right&&null===t.curr.left)t.curr!=this.root?t.parent.left===t.curr?t.parent.left=null:t.parent.right=null:this.root=null;else if(null===t.curr.left||null===t.curr.right)t.curr!=this.root?t.parent.left===t.curr?null!=t.curr.left?t.parent.left=t.curr.left:t.parent.left=t.curr.right:null!=t.curr.left?t.parent.right=t.curr.left:t.parent.right=t.curr.right:null!=t.curr.left?this.root=t.curr.left:this.root=t.curr.right;else{const e=this.recursiveReplace(t.curr.right,t.curr);null!=t.curr.left&&(e.curr.left=t.curr.left),null!=t.curr.right&&t.curr.right!=e.curr&&(e.curr.right=t.curr.right),t.curr!=this.root?t.parent.left===t.curr?t.parent.left=e.curr:t.parent.right=e.curr:this.root=e.curr,e.parent.left===e.curr?e.parent.left=null:e.parent.right=null}}recursiveReplace(e,t){return null!==e.left?this.recursiveReplace(e.left,e):{curr:e,parent:t}}recursiveDelete(e,t,r){if(null===t)return null;if(e===t.value)return{curr:t,parent:r};const n=this.recursiveDelete(e,t.left,t);return null!==n?n:this.recursiveDelete(e,t.right,t)}find(e){return this.recursiveFind(e,this.root)}recursiveFind(e,t){if(null===t)return null;if(e===t.value)return t;const r=this.recursiveFind(e,t.left);return null!==r?r:this.recursiveFind(e,t.right)}levelOrder(e){if(!this.root)return[];const t=[];let r=[this.root];for(;r.length;){const n=r.shift();e?t.push(e(n)):t.push(n.value),n.left&&r.push(n.left),n.right&&r.push(n.right)}return t}inOrder(e){const t=[];return this.recursiveInOrder(this.root,e,t),t}recursiveInOrder(e,t,r){null!==e&&(this.recursiveInOrder(e.left,t,r),t?t(e):r.push(e.value),this.recursiveInOrder(e.right,t,r))}preOrder(e){const t=[];return this.recursivePreOrder(this.root,e,t),t}recursivePreOrder(e,t,r){null!==e&&(t?t(e):r.push(e.value),this.recursivePreOrder(e.left,t,r),this.recursivePreOrder(e.right,t,r))}postOrder(e){const t=[];return this.recursivePostOrder(this.root,e,t),t}recursivePostOrder(e,t,r){null!==e&&(this.recursivePostOrder(e.left,t,r),this.recursivePostOrder(e.right,t,r),t?t(e):r.push(e.value))}height(e){const t=this.recursiveFind(e,this.root);return this.recursiveHeight(t)}recursiveHeight(e){if(null===e)return-1;const t=this.recursiveHeight(e.left),r=this.recursiveHeight(e.right);return Math.max(t,r)+1}depth(e){return this.recursiveDepth(e,this.root)}recursiveDepth(e,t,r=0){if(null===t)return-1;if(t.value===e)return r;const n=this.recursiveDepth(e,t.left,r+1),i=this.recursiveDepth(e,t.right,r+1);return-1!==n?n:i}isBalanced(){return this.recursiveIsBalanced(this.root)}recursiveIsBalanced(e){if(null===e)return!0;const t=this.recursiveHeight(e.left),r=this.recursiveHeight(e.right),n=this.recursiveIsBalanced(e.left),i=this.recursiveIsBalanced(e.right),u=Math.abs(t-r)<=1;return n&&i&&u}rebalance(){const e=this.levelOrder();this.root=this.buildTree(e)}}const r=document.getElementById("insertInput"),n=document.getElementById("insertNumber"),i=document.getElementById("deleteNumber"),u=document.getElementById("findNumber"),l=document.getElementById("info"),s=document.getElementById("rebalance"),c=document.querySelector(".information");r.value="0 1 2 3 4 5";let h=new t;function o(){h=new t,r.value.split(" ").map((e=>parseInt(e,10))).filter((e=>!isNaN(e))).forEach((e=>{h.insert(e)})),h.rebalance(),d(h)}function d(e){document.getElementById("output-div").innerHTML=e.prettyPrint(e.root),a()}function a(){c.innerHTML=`<h2>Information</h2>\n    <a>Balanced: ${h.isBalanced()}</a>\n    <a>Pre Order: ${h.preOrder()}</a>\n    <a>In Order: ${h.inOrder()}</a>\n    <a>Post Order: ${h.postOrder()}</a>`}o(),r.addEventListener("input",o),n.addEventListener("click",(function(){const e=parseInt(document.getElementById("inputText").value,10);null===h.find(e)?l.textContent=`inserted element: ${e}`:l.textContent="it already exists",h.insert(e),document.getElementById("inputText").value="",d(h)})),i.addEventListener("click",(function(){const e=parseInt(document.getElementById("inputText").value,10);null!=h.find(e)?l.textContent=`removed element: ${e}`:l.textContent="does not exist",h.delete(e),document.getElementById("inputText").value="",d(h)})),u.addEventListener("click",(function(){const e=parseInt(document.getElementById("inputText").value,10);null===h.find(e)?l.textContent="does not exist":l.textContent=`height: ${h.height(e)}\n        depth: ${h.depth(e)}`,document.getElementById("inputText").value="",d(h)})),s.addEventListener("click",(function(){h.rebalance(),d(h)}))})();